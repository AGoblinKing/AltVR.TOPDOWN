(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
/*global altspace, THREE*/
"use strict";

var sim = altspace.utilities.Simulation(),
    instanceBase = altspace.utilities.sync.getInstance({
    authorId: "JoshuaGalvin"
}),
    sceneSync = altspace.utilities.behaviors.SceneSync(instanceBase, {
    instantiators: { "Cube": createCube },
    ready: function ready(firstInstance) {
        if (firstInstance) {
            sceneSync.instantiate("Cube");
        }
    }
}),
    CUBE_SCALE = 150;

sim.scene.addBehavior(sceneSync);

function createCube() {
    var cube = new THREE.Mesh(new THREE.BoxGeometry(1, 1, 1), new THREE.MeshBasicMaterial({ color: "#ffffff" }));

    cube.scale.multiplyScalar(CUBE_SCALE);
    cube.addBehaviors(altspace.utilities.behaviors.Object3DSync({ syncData: true }), altspace.utilities.behaviors.Spin({ speed: 0.0005 }), ChangeColor());

    sim.scene.add(cube);
    return cube;
}

// this looks like an object to me
function ChangeColor() {
    var object3d = undefined,
        lastColor = undefined;

    return {
        awake: function awake(o) {
            object3d = o;
            o.addEventListener("cursordown", function () {
                o.userData.syncData.color = Math.random() * (255 * 255 * 255);
                o.getBehaviorByType("Object3DSync").enqueueSend();
            });
        },
        update: function update(deltaTime) {
            if (object3d.userData.syncData.color !== lastColor) {
                lastColor = object3d.userData.syncData.color;
                object3d.material.color = new THREE.Color(object3d.userData.syncData.color);
                object3d.material.needsUpdate = true;
            }
        }
    };
}

},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJhcHAuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FDQ0EsWUFBWSxDQUFDOztBQUViLElBQUksR0FBRyxHQUFHLFFBQVEsQ0FBQyxTQUFTLENBQUMsVUFBVSxFQUFFO0lBQ3JDLFlBQVksR0FBRyxRQUFRLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUM7QUFDL0MsWUFBUSxFQUFLLGNBQWM7Q0FDOUIsQ0FBQztJQUNGLFNBQVMsR0FBRyxRQUFRLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsWUFBWSxFQUFFO0FBQzdELGlCQUFhLEVBQUcsRUFBRSxNQUFNLEVBQUcsVUFBVSxFQUFFO0FBQ3ZDLFNBQUssaUJBQUMsYUFBYSxFQUFFO0FBQ2pCLFlBQUcsYUFBYSxFQUFFO0FBQ2QscUJBQVMsQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDakM7S0FDSjtDQUNKLENBQUM7SUFDRixVQUFVLEdBQUcsR0FBRyxDQUFDOztBQUVyQixHQUFHLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUMsQ0FBQzs7QUFFakMsU0FBUyxVQUFVLEdBQUc7QUFDbEIsUUFBSSxJQUFJLEdBQUcsSUFBSSxLQUFLLENBQUMsSUFBSSxDQUNyQixJQUFJLEtBQUssQ0FBQyxXQUFXLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsRUFDOUIsSUFBSSxLQUFLLENBQUMsaUJBQWlCLENBQUMsRUFBRSxLQUFLLEVBQUcsU0FBUyxFQUFFLENBQUMsQ0FDckQsQ0FBQzs7QUFFRixRQUFJLENBQUMsS0FBSyxDQUFDLGNBQWMsQ0FBQyxVQUFVLENBQUMsQ0FBQztBQUN0QyxRQUFJLENBQUMsWUFBWSxDQUNiLFFBQVEsQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLFlBQVksQ0FBQyxFQUFFLFFBQVEsRUFBRyxJQUFJLEVBQUUsQ0FBQyxFQUM5RCxRQUFRLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsRUFBRSxLQUFLLEVBQUcsTUFBTSxFQUFFLENBQUMsRUFDckQsV0FBVyxFQUFFLENBQ2hCLENBQUM7O0FBRUYsT0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDcEIsV0FBTyxJQUFJLENBQUM7Q0FDZjs7O0FBQUEsQUFHRCxTQUFTLFdBQVcsR0FBRztBQUNuQixRQUFJLFFBQVEsWUFBQTtRQUNSLFNBQVMsWUFBQSxDQUFDOztBQUVkLFdBQU87QUFDSCxhQUFLLGlCQUFDLENBQUMsRUFBRTtBQUNMLG9CQUFRLEdBQUcsQ0FBQyxDQUFDO0FBQ2IsYUFBQyxDQUFDLGdCQUFnQixDQUFDLFlBQVksRUFBRSxZQUFXO0FBQ3hDLGlCQUFDLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxJQUFFLEdBQUcsR0FBQyxHQUFHLEdBQUMsR0FBRyxDQUFBLEFBQUMsQ0FBQztBQUN4RCxpQkFBQyxDQUFDLGlCQUFpQixDQUFDLGNBQWMsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDO2FBQ3JELENBQUMsQ0FBQztTQUNOO0FBRUQsY0FBTSxrQkFBQyxTQUFTLEVBQUU7QUFDZCxnQkFBRyxRQUFRLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxLQUFLLEtBQUssU0FBUyxFQUFFO0FBQy9DLHlCQUFTLEdBQUcsUUFBUSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDO0FBQzdDLHdCQUFRLENBQUMsUUFBUSxDQUFDLEtBQUssR0FBRyxJQUFJLEtBQUssQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDNUUsd0JBQVEsQ0FBQyxRQUFRLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQzthQUN4QztTQUNKO0tBQ0osQ0FBQztDQUNMIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gZSh0LG4scil7ZnVuY3Rpb24gcyhvLHUpe2lmKCFuW29dKXtpZighdFtvXSl7dmFyIGE9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtpZighdSYmYSlyZXR1cm4gYShvLCEwKTtpZihpKXJldHVybiBpKG8sITApO3ZhciBmPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIrbytcIidcIik7dGhyb3cgZi5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGZ9dmFyIGw9bltvXT17ZXhwb3J0czp7fX07dFtvXVswXS5jYWxsKGwuZXhwb3J0cyxmdW5jdGlvbihlKXt2YXIgbj10W29dWzFdW2VdO3JldHVybiBzKG4/bjplKX0sbCxsLmV4cG9ydHMsZSx0LG4scil9cmV0dXJuIG5bb10uZXhwb3J0c312YXIgaT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2Zvcih2YXIgbz0wO288ci5sZW5ndGg7bysrKXMocltvXSk7cmV0dXJuIHN9KSIsIi8qZ2xvYmFsIGFsdHNwYWNlLCBUSFJFRSovXHJcblwidXNlIHN0cmljdFwiO1xyXG5cclxudmFyIHNpbSA9IGFsdHNwYWNlLnV0aWxpdGllcy5TaW11bGF0aW9uKCksXHJcbiAgICBpbnN0YW5jZUJhc2UgPSBhbHRzcGFjZS51dGlsaXRpZXMuc3luYy5nZXRJbnN0YW5jZSh7IFxyXG4gICAgICAgIGF1dGhvcklkICAgOiBcIkpvc2h1YUdhbHZpblwiXHJcbiAgICB9KSxcclxuICAgIHNjZW5lU3luYyA9IGFsdHNwYWNlLnV0aWxpdGllcy5iZWhhdmlvcnMuU2NlbmVTeW5jKGluc3RhbmNlQmFzZSwge1xyXG4gICAgICAgIGluc3RhbnRpYXRvcnMgOiB7IFwiQ3ViZVwiIDogY3JlYXRlQ3ViZSB9LFxyXG4gICAgICAgIHJlYWR5KGZpcnN0SW5zdGFuY2UpIHtcclxuICAgICAgICAgICAgaWYoZmlyc3RJbnN0YW5jZSkge1xyXG4gICAgICAgICAgICAgICAgc2NlbmVTeW5jLmluc3RhbnRpYXRlKFwiQ3ViZVwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0pLFxyXG4gICAgQ1VCRV9TQ0FMRSA9IDE1MDtcclxuICAgIFxyXG5zaW0uc2NlbmUuYWRkQmVoYXZpb3Ioc2NlbmVTeW5jKTtcclxuXHJcbmZ1bmN0aW9uIGNyZWF0ZUN1YmUoKSB7XHJcbiAgICBsZXQgY3ViZSA9IG5ldyBUSFJFRS5NZXNoKFxyXG4gICAgICAgIG5ldyBUSFJFRS5Cb3hHZW9tZXRyeSgxLCAxLCAxKSxcclxuICAgICAgICBuZXcgVEhSRUUuTWVzaEJhc2ljTWF0ZXJpYWwoeyBjb2xvciA6IFwiI2ZmZmZmZlwiIH0pXHJcbiAgICApO1xyXG4gICAgXHJcbiAgICBjdWJlLnNjYWxlLm11bHRpcGx5U2NhbGFyKENVQkVfU0NBTEUpO1xyXG4gICAgY3ViZS5hZGRCZWhhdmlvcnMoXHJcbiAgICAgICAgYWx0c3BhY2UudXRpbGl0aWVzLmJlaGF2aW9ycy5PYmplY3QzRFN5bmMoeyBzeW5jRGF0YSA6IHRydWUgfSksXHJcbiAgICAgICAgYWx0c3BhY2UudXRpbGl0aWVzLmJlaGF2aW9ycy5TcGluKHsgc3BlZWQgOiAwLjAwMDUgfSksXHJcbiAgICAgICAgQ2hhbmdlQ29sb3IoKVxyXG4gICAgKTtcclxuICAgIFxyXG4gICAgc2ltLnNjZW5lLmFkZChjdWJlKTtcclxuICAgIHJldHVybiBjdWJlO1xyXG59XHJcblxyXG4vLyB0aGlzIGxvb2tzIGxpa2UgYW4gb2JqZWN0IHRvIG1lXHJcbmZ1bmN0aW9uIENoYW5nZUNvbG9yKCkge1xyXG4gICAgbGV0IG9iamVjdDNkLFxyXG4gICAgICAgIGxhc3RDb2xvcjtcclxuICAgICAgICBcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgYXdha2Uobykge1xyXG4gICAgICAgICAgICBvYmplY3QzZCA9IG87XHJcbiAgICAgICAgICAgIG8uYWRkRXZlbnRMaXN0ZW5lcihcImN1cnNvcmRvd25cIiwgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICBvLnVzZXJEYXRhLnN5bmNEYXRhLmNvbG9yID0gTWF0aC5yYW5kb20oKSooMjU1KjI1NSoyNTUpO1xyXG4gICAgICAgICAgICAgICAgby5nZXRCZWhhdmlvckJ5VHlwZShcIk9iamVjdDNEU3luY1wiKS5lbnF1ZXVlU2VuZCgpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIFxyXG4gICAgICAgIHVwZGF0ZShkZWx0YVRpbWUpIHtcclxuICAgICAgICAgICAgaWYob2JqZWN0M2QudXNlckRhdGEuc3luY0RhdGEuY29sb3IgIT09IGxhc3RDb2xvcikge1xyXG4gICAgICAgICAgICAgICAgbGFzdENvbG9yID0gb2JqZWN0M2QudXNlckRhdGEuc3luY0RhdGEuY29sb3I7XHJcbiAgICAgICAgICAgICAgICBvYmplY3QzZC5tYXRlcmlhbC5jb2xvciA9IG5ldyBUSFJFRS5Db2xvcihvYmplY3QzZC51c2VyRGF0YS5zeW5jRGF0YS5jb2xvcik7XHJcbiAgICAgICAgICAgICAgICBvYmplY3QzZC5tYXRlcmlhbC5uZWVkc1VwZGF0ZSA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG59Il19
